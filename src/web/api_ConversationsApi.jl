# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

struct ConversationsApi <: SwaggerApi
    client::Swagger.Client
end

function _swaggerinternal_conversationsArchive(_api::ConversationsApi; channel=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", Dict{String, Any}, "/conversations.archive", ["slackAuth"])
    Swagger.set_param(_ctx.form, "channel", channel)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded", "application/json"] : [_mediaType])
    return _ctx
end

"""

Archives a conversation.
Param: channel::String
Return: Dict{String, Any}
"""
function conversationsArchive(_api::ConversationsApi; channel=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_conversationsArchive(_api; channel=channel, _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function conversationsArchive(_api::ConversationsApi, response_stream::Channel; channel=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_conversationsArchive(_api; channel=channel, _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_conversationsClose(_api::ConversationsApi; channel=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", Dict{String, Any}, "/conversations.close", ["slackAuth"])
    Swagger.set_param(_ctx.form, "channel", channel)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded", "application/json"] : [_mediaType])
    return _ctx
end

"""

Closes a direct message or multi-person direct message.
Param: channel::String
Return: Dict{String, Any}
"""
function conversationsClose(_api::ConversationsApi; channel=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_conversationsClose(_api; channel=channel, _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function conversationsClose(_api::ConversationsApi, response_stream::Channel; channel=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_conversationsClose(_api; channel=channel, _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_conversationsCreate(_api::ConversationsApi; name=nothing, is_private=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", Dict{String, Any}, "/conversations.create", ["slackAuth"])
    Swagger.set_param(_ctx.form, "name", name)  # type String
    Swagger.set_param(_ctx.form, "is_private", is_private)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded", "application/json"] : [_mediaType])
    return _ctx
end

"""

Initiates a public or private channel-based conversation
Param: name::String
Param: is_private::Bool
Return: Dict{String, Any}
"""
function conversationsCreate(_api::ConversationsApi; name=nothing, is_private=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_conversationsCreate(_api; name=name, is_private=is_private, _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function conversationsCreate(_api::ConversationsApi, response_stream::Channel; name=nothing, is_private=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_conversationsCreate(_api; name=name, is_private=is_private, _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_conversationsHistory(_api::ConversationsApi; channel=nothing, latest=nothing, oldest=nothing, inclusive=nothing, limit=nothing, cursor=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", Dict{String, Any}, "/conversations.history", ["slackAuth"])
    Swagger.set_param(_ctx.query, "channel", channel)  # type String
    Swagger.set_param(_ctx.query, "latest", latest)  # type Float32
    Swagger.set_param(_ctx.query, "oldest", oldest)  # type Float32
    Swagger.set_param(_ctx.query, "inclusive", inclusive)  # type Bool
    Swagger.set_param(_ctx.query, "limit", limit)  # type Int32
    Swagger.set_param(_ctx.query, "cursor", cursor)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded"] : [_mediaType])
    return _ctx
end

"""

Fetches a conversation's history of messages and events.
Param: channel::String
Param: latest::Float32
Param: oldest::Float32
Param: inclusive::Bool
Param: limit::Int32
Param: cursor::String
Return: Dict{String, Any}
"""
function conversationsHistory(_api::ConversationsApi; channel=nothing, latest=nothing, oldest=nothing, inclusive=nothing, limit=nothing, cursor=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_conversationsHistory(_api; channel=channel, latest=latest, oldest=oldest, inclusive=inclusive, limit=limit, cursor=cursor, _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function conversationsHistory(_api::ConversationsApi, response_stream::Channel; channel=nothing, latest=nothing, oldest=nothing, inclusive=nothing, limit=nothing, cursor=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_conversationsHistory(_api; channel=channel, latest=latest, oldest=oldest, inclusive=inclusive, limit=limit, cursor=cursor, _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_conversationsInfo(_api::ConversationsApi; channel=nothing, include_locale=nothing, include_num_members=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", Dict{String, Any}, "/conversations.info", ["slackAuth"])
    Swagger.set_param(_ctx.query, "channel", channel)  # type String
    Swagger.set_param(_ctx.query, "include_locale", include_locale)  # type Bool
    Swagger.set_param(_ctx.query, "include_num_members", include_num_members)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded"] : [_mediaType])
    return _ctx
end

"""

Retrieve information about a conversation.
Param: channel::String
Param: include_locale::Bool
Param: include_num_members::Bool
Return: Dict{String, Any}
"""
function conversationsInfo(_api::ConversationsApi; channel=nothing, include_locale=nothing, include_num_members=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_conversationsInfo(_api; channel=channel, include_locale=include_locale, include_num_members=include_num_members, _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function conversationsInfo(_api::ConversationsApi, response_stream::Channel; channel=nothing, include_locale=nothing, include_num_members=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_conversationsInfo(_api; channel=channel, include_locale=include_locale, include_num_members=include_num_members, _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_conversationsInvite(_api::ConversationsApi; channel=nothing, users=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", Dict{String, Any}, "/conversations.invite", ["slackAuth"])
    Swagger.set_param(_ctx.form, "channel", channel)  # type String
    Swagger.set_param(_ctx.form, "users", users)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded", "application/json"] : [_mediaType])
    return _ctx
end

"""

Invites users to a channel.
Param: channel::String
Param: users::String
Return: Dict{String, Any}
"""
function conversationsInvite(_api::ConversationsApi; channel=nothing, users=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_conversationsInvite(_api; channel=channel, users=users, _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function conversationsInvite(_api::ConversationsApi, response_stream::Channel; channel=nothing, users=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_conversationsInvite(_api; channel=channel, users=users, _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_conversationsJoin(_api::ConversationsApi; channel=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", Dict{String, Any}, "/conversations.join", ["slackAuth"])
    Swagger.set_param(_ctx.form, "channel", channel)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded", "application/json"] : [_mediaType])
    return _ctx
end

"""

Joins an existing conversation.
Param: channel::String
Return: Dict{String, Any}
"""
function conversationsJoin(_api::ConversationsApi; channel=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_conversationsJoin(_api; channel=channel, _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function conversationsJoin(_api::ConversationsApi, response_stream::Channel; channel=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_conversationsJoin(_api; channel=channel, _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_conversationsKick(_api::ConversationsApi; channel=nothing, user=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", Dict{String, Any}, "/conversations.kick", ["slackAuth"])
    Swagger.set_param(_ctx.form, "channel", channel)  # type String
    Swagger.set_param(_ctx.form, "user", user)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded", "application/json"] : [_mediaType])
    return _ctx
end

"""

Removes a user from a conversation.
Param: channel::String
Param: user::String
Return: Dict{String, Any}
"""
function conversationsKick(_api::ConversationsApi; channel=nothing, user=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_conversationsKick(_api; channel=channel, user=user, _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function conversationsKick(_api::ConversationsApi, response_stream::Channel; channel=nothing, user=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_conversationsKick(_api; channel=channel, user=user, _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_conversationsLeave(_api::ConversationsApi; channel=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", Dict{String, Any}, "/conversations.leave", ["slackAuth"])
    Swagger.set_param(_ctx.form, "channel", channel)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded", "application/json"] : [_mediaType])
    return _ctx
end

"""

Leaves a conversation.
Param: channel::String
Return: Dict{String, Any}
"""
function conversationsLeave(_api::ConversationsApi; channel=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_conversationsLeave(_api; channel=channel, _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function conversationsLeave(_api::ConversationsApi, response_stream::Channel; channel=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_conversationsLeave(_api; channel=channel, _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_conversationsList(_api::ConversationsApi; exclude_archived=nothing, types=nothing, limit=nothing, cursor=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", Dict{String, Any}, "/conversations.list", ["slackAuth"])
    Swagger.set_param(_ctx.query, "exclude_archived", exclude_archived)  # type Bool
    Swagger.set_param(_ctx.query, "types", types)  # type String
    Swagger.set_param(_ctx.query, "limit", limit)  # type Int32
    Swagger.set_param(_ctx.query, "cursor", cursor)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded"] : [_mediaType])
    return _ctx
end

"""

Lists all channels in a Slack team.
Param: exclude_archived::Bool
Param: types::String
Param: limit::Int32
Param: cursor::String
Return: Dict{String, Any}
"""
function conversationsList(_api::ConversationsApi; exclude_archived=nothing, types=nothing, limit=nothing, cursor=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_conversationsList(_api; exclude_archived=exclude_archived, types=types, limit=limit, cursor=cursor, _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function conversationsList(_api::ConversationsApi, response_stream::Channel; exclude_archived=nothing, types=nothing, limit=nothing, cursor=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_conversationsList(_api; exclude_archived=exclude_archived, types=types, limit=limit, cursor=cursor, _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_conversationsMark(_api::ConversationsApi; channel=nothing, ts=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", Dict{String, Any}, "/conversations.mark", ["slackAuth"])
    Swagger.set_param(_ctx.form, "channel", channel)  # type String
    Swagger.set_param(_ctx.form, "ts", ts)  # type Float32
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded", "application/json"] : [_mediaType])
    return _ctx
end

"""

Sets the read cursor in a channel.
Param: channel::String
Param: ts::Float32
Return: Dict{String, Any}
"""
function conversationsMark(_api::ConversationsApi; channel=nothing, ts=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_conversationsMark(_api; channel=channel, ts=ts, _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function conversationsMark(_api::ConversationsApi, response_stream::Channel; channel=nothing, ts=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_conversationsMark(_api; channel=channel, ts=ts, _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_conversationsMembers(_api::ConversationsApi; channel=nothing, limit=nothing, cursor=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", Dict{String, Any}, "/conversations.members", ["slackAuth"])
    Swagger.set_param(_ctx.query, "channel", channel)  # type String
    Swagger.set_param(_ctx.query, "limit", limit)  # type Int32
    Swagger.set_param(_ctx.query, "cursor", cursor)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded"] : [_mediaType])
    return _ctx
end

"""

Retrieve members of a conversation.
Param: channel::String
Param: limit::Int32
Param: cursor::String
Return: Dict{String, Any}
"""
function conversationsMembers(_api::ConversationsApi; channel=nothing, limit=nothing, cursor=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_conversationsMembers(_api; channel=channel, limit=limit, cursor=cursor, _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function conversationsMembers(_api::ConversationsApi, response_stream::Channel; channel=nothing, limit=nothing, cursor=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_conversationsMembers(_api; channel=channel, limit=limit, cursor=cursor, _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_conversationsOpen(_api::ConversationsApi; channel=nothing, users=nothing, return_im=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", Dict{String, Any}, "/conversations.open", ["slackAuth"])
    Swagger.set_param(_ctx.form, "channel", channel)  # type String
    Swagger.set_param(_ctx.form, "users", users)  # type String
    Swagger.set_param(_ctx.form, "return_im", return_im)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded", "application/json"] : [_mediaType])
    return _ctx
end

"""

Opens or resumes a direct message or multi-person direct message.
Param: channel::String
Param: users::String
Param: return_im::Bool
Return: Dict{String, Any}
"""
function conversationsOpen(_api::ConversationsApi; channel=nothing, users=nothing, return_im=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_conversationsOpen(_api; channel=channel, users=users, return_im=return_im, _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function conversationsOpen(_api::ConversationsApi, response_stream::Channel; channel=nothing, users=nothing, return_im=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_conversationsOpen(_api; channel=channel, users=users, return_im=return_im, _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_conversationsRename(_api::ConversationsApi; channel=nothing, name=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", Dict{String, Any}, "/conversations.rename", ["slackAuth"])
    Swagger.set_param(_ctx.form, "channel", channel)  # type String
    Swagger.set_param(_ctx.form, "name", name)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded", "application/json"] : [_mediaType])
    return _ctx
end

"""

Renames a conversation.
Param: channel::String
Param: name::String
Return: Dict{String, Any}
"""
function conversationsRename(_api::ConversationsApi; channel=nothing, name=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_conversationsRename(_api; channel=channel, name=name, _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function conversationsRename(_api::ConversationsApi, response_stream::Channel; channel=nothing, name=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_conversationsRename(_api; channel=channel, name=name, _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_conversationsReplies(_api::ConversationsApi; channel=nothing, ts=nothing, latest=nothing, oldest=nothing, inclusive=nothing, limit=nothing, cursor=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", Dict{String, Any}, "/conversations.replies", ["slackAuth"])
    Swagger.set_param(_ctx.query, "channel", channel)  # type String
    Swagger.set_param(_ctx.query, "ts", ts)  # type Float32
    Swagger.set_param(_ctx.query, "latest", latest)  # type Float32
    Swagger.set_param(_ctx.query, "oldest", oldest)  # type Float32
    Swagger.set_param(_ctx.query, "inclusive", inclusive)  # type Bool
    Swagger.set_param(_ctx.query, "limit", limit)  # type Int32
    Swagger.set_param(_ctx.query, "cursor", cursor)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded"] : [_mediaType])
    return _ctx
end

"""

Retrieve a thread of messages posted to a conversation
Param: channel::String
Param: ts::Float32
Param: latest::Float32
Param: oldest::Float32
Param: inclusive::Bool
Param: limit::Int32
Param: cursor::String
Return: Dict{String, Any}
"""
function conversationsReplies(_api::ConversationsApi; channel=nothing, ts=nothing, latest=nothing, oldest=nothing, inclusive=nothing, limit=nothing, cursor=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_conversationsReplies(_api; channel=channel, ts=ts, latest=latest, oldest=oldest, inclusive=inclusive, limit=limit, cursor=cursor, _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function conversationsReplies(_api::ConversationsApi, response_stream::Channel; channel=nothing, ts=nothing, latest=nothing, oldest=nothing, inclusive=nothing, limit=nothing, cursor=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_conversationsReplies(_api; channel=channel, ts=ts, latest=latest, oldest=oldest, inclusive=inclusive, limit=limit, cursor=cursor, _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_conversationsSetPurpose(_api::ConversationsApi; channel=nothing, purpose=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", Dict{String, Any}, "/conversations.setPurpose", ["slackAuth"])
    Swagger.set_param(_ctx.form, "channel", channel)  # type String
    Swagger.set_param(_ctx.form, "purpose", purpose)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded", "application/json"] : [_mediaType])
    return _ctx
end

"""

Sets the purpose for a conversation.
Param: channel::String
Param: purpose::String
Return: Dict{String, Any}
"""
function conversationsSetPurpose(_api::ConversationsApi; channel=nothing, purpose=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_conversationsSetPurpose(_api; channel=channel, purpose=purpose, _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function conversationsSetPurpose(_api::ConversationsApi, response_stream::Channel; channel=nothing, purpose=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_conversationsSetPurpose(_api; channel=channel, purpose=purpose, _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_conversationsSetTopic(_api::ConversationsApi; channel=nothing, topic=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", Dict{String, Any}, "/conversations.setTopic", ["slackAuth"])
    Swagger.set_param(_ctx.form, "channel", channel)  # type String
    Swagger.set_param(_ctx.form, "topic", topic)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded", "application/json"] : [_mediaType])
    return _ctx
end

"""

Sets the topic for a conversation.
Param: channel::String
Param: topic::String
Return: Dict{String, Any}
"""
function conversationsSetTopic(_api::ConversationsApi; channel=nothing, topic=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_conversationsSetTopic(_api; channel=channel, topic=topic, _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function conversationsSetTopic(_api::ConversationsApi, response_stream::Channel; channel=nothing, topic=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_conversationsSetTopic(_api; channel=channel, topic=topic, _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_conversationsUnarchive(_api::ConversationsApi; channel=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", Dict{String, Any}, "/conversations.unarchive", ["slackAuth"])
    Swagger.set_param(_ctx.form, "channel", channel)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded", "application/json"] : [_mediaType])
    return _ctx
end

"""

Reverses conversation archival.
Param: channel::String
Return: Dict{String, Any}
"""
function conversationsUnarchive(_api::ConversationsApi; channel=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_conversationsUnarchive(_api; channel=channel, _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function conversationsUnarchive(_api::ConversationsApi, response_stream::Channel; channel=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_conversationsUnarchive(_api; channel=channel, _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

export conversationsArchive, conversationsClose, conversationsCreate, conversationsHistory, conversationsInfo, conversationsInvite, conversationsJoin, conversationsKick, conversationsLeave, conversationsList, conversationsMark, conversationsMembers, conversationsOpen, conversationsRename, conversationsReplies, conversationsSetPurpose, conversationsSetTopic, conversationsUnarchive
