# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

struct UsersApi <: SwaggerApi
    client::Swagger.Client
end

function _swaggerinternal_usersConversations(_api::UsersApi; user=nothing, types=nothing, exclude_archived=nothing, limit=nothing, cursor=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", Dict{String, Any}, "/users.conversations", ["slackAuth"])
    Swagger.set_param(_ctx.query, "user", user)  # type String
    Swagger.set_param(_ctx.query, "types", types)  # type String
    Swagger.set_param(_ctx.query, "exclude_archived", exclude_archived)  # type Bool
    Swagger.set_param(_ctx.query, "limit", limit)  # type Int32
    Swagger.set_param(_ctx.query, "cursor", cursor)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded"] : [_mediaType])
    return _ctx
end

"""

List conversations the calling user may access.
Param: user::String
Param: types::String
Param: exclude_archived::Bool
Param: limit::Int32
Param: cursor::String
Return: Dict{String, Any}
"""
function usersConversations(_api::UsersApi; user=nothing, types=nothing, exclude_archived=nothing, limit=nothing, cursor=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_usersConversations(_api; user=user, types=types, exclude_archived=exclude_archived, limit=limit, cursor=cursor, _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function usersConversations(_api::UsersApi, response_stream::Channel; user=nothing, types=nothing, exclude_archived=nothing, limit=nothing, cursor=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_usersConversations(_api; user=user, types=types, exclude_archived=exclude_archived, limit=limit, cursor=cursor, _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_usersDeletePhoto(_api::UsersApi; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", Dict{String, Any}, "/users.deletePhoto", ["slackAuth"])
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded"] : [_mediaType])
    return _ctx
end

"""

Delete the user profile photo
Return: Dict{String, Any}
"""
function usersDeletePhoto(_api::UsersApi; _mediaType=nothing)
    _ctx = _swaggerinternal_usersDeletePhoto(_api; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function usersDeletePhoto(_api::UsersApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _swaggerinternal_usersDeletePhoto(_api; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_usersGetPresence(_api::UsersApi; user=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", Dict{String, Any}, "/users.getPresence", ["slackAuth"])
    Swagger.set_param(_ctx.query, "user", user)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded"] : [_mediaType])
    return _ctx
end

"""

Gets user presence information.
Param: user::String
Return: Dict{String, Any}
"""
function usersGetPresence(_api::UsersApi; user=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_usersGetPresence(_api; user=user, _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function usersGetPresence(_api::UsersApi, response_stream::Channel; user=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_usersGetPresence(_api; user=user, _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_usersIdentity(_api::UsersApi; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", Any, "/users.identity", ["slackAuth"])
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded"] : [_mediaType])
    return _ctx
end

"""

Get a user's identity.
Return: Any
"""
function usersIdentity(_api::UsersApi; _mediaType=nothing)
    _ctx = _swaggerinternal_usersIdentity(_api; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function usersIdentity(_api::UsersApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _swaggerinternal_usersIdentity(_api; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_usersInfo(_api::UsersApi; include_locale=nothing, user=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", Dict{String, Any}, "/users.info", ["slackAuth"])
    Swagger.set_param(_ctx.query, "include_locale", include_locale)  # type Bool
    Swagger.set_param(_ctx.query, "user", user)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded"] : [_mediaType])
    return _ctx
end

"""

Gets information about a user.
Param: include_locale::Bool
Param: user::String
Return: Dict{String, Any}
"""
function usersInfo(_api::UsersApi; include_locale=nothing, user=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_usersInfo(_api; include_locale=include_locale, user=user, _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function usersInfo(_api::UsersApi, response_stream::Channel; include_locale=nothing, user=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_usersInfo(_api; include_locale=include_locale, user=user, _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_usersList(_api::UsersApi; limit=nothing, cursor=nothing, include_locale=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", Dict{String, Any}, "/users.list", ["slackAuth"])
    Swagger.set_param(_ctx.query, "limit", limit)  # type Int32
    Swagger.set_param(_ctx.query, "cursor", cursor)  # type String
    Swagger.set_param(_ctx.query, "include_locale", include_locale)  # type Bool
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded"] : [_mediaType])
    return _ctx
end

"""

Lists all users in a Slack team.
Param: limit::Int32
Param: cursor::String
Param: include_locale::Bool
Return: Dict{String, Any}
"""
function usersList(_api::UsersApi; limit=nothing, cursor=nothing, include_locale=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_usersList(_api; limit=limit, cursor=cursor, include_locale=include_locale, _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function usersList(_api::UsersApi, response_stream::Channel; limit=nothing, cursor=nothing, include_locale=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_usersList(_api; limit=limit, cursor=cursor, include_locale=include_locale, _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_usersLookupByEmail(_api::UsersApi, email::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", Dict{String, Any}, "/users.lookupByEmail", ["slackAuth"])
    Swagger.set_param(_ctx.query, "email", email)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded"] : [_mediaType])
    return _ctx
end

"""

Find a user with an email address.
Param: email::String (required)
Return: Dict{String, Any}
"""
function usersLookupByEmail(_api::UsersApi, email::String; _mediaType=nothing)
    _ctx = _swaggerinternal_usersLookupByEmail(_api, email; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function usersLookupByEmail(_api::UsersApi, response_stream::Channel, email::String; _mediaType=nothing)
    _ctx = _swaggerinternal_usersLookupByEmail(_api, email; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_usersProfileGet(_api::UsersApi; include_labels=nothing, user=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", Dict{String, Any}, "/users.profile.get", ["slackAuth"])
    Swagger.set_param(_ctx.query, "include_labels", include_labels)  # type Bool
    Swagger.set_param(_ctx.query, "user", user)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded"] : [_mediaType])
    return _ctx
end

"""

Retrieves a user's profile information.
Param: include_labels::Bool
Param: user::String
Return: Dict{String, Any}
"""
function usersProfileGet(_api::UsersApi; include_labels=nothing, user=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_usersProfileGet(_api; include_labels=include_labels, user=user, _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function usersProfileGet(_api::UsersApi, response_stream::Channel; include_labels=nothing, user=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_usersProfileGet(_api; include_labels=include_labels, user=user, _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_usersProfileSet(_api::UsersApi; name=nothing, profile=nothing, user=nothing, value=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", Dict{String, Any}, "/users.profile.set", ["slackAuth"])
    Swagger.set_param(_ctx.form, "name", name)  # type String
    Swagger.set_param(_ctx.form, "profile", profile)  # type String
    Swagger.set_param(_ctx.form, "user", user)  # type String
    Swagger.set_param(_ctx.form, "value", value)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded", "application/json"] : [_mediaType])
    return _ctx
end

"""

Set the profile information for a user.
Param: name::String
Param: profile::String
Param: user::String
Param: value::String
Return: Dict{String, Any}
"""
function usersProfileSet(_api::UsersApi; name=nothing, profile=nothing, user=nothing, value=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_usersProfileSet(_api; name=name, profile=profile, user=user, value=value, _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function usersProfileSet(_api::UsersApi, response_stream::Channel; name=nothing, profile=nothing, user=nothing, value=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_usersProfileSet(_api; name=name, profile=profile, user=user, value=value, _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_usersSetActive(_api::UsersApi; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", Dict{String, Any}, "/users.setActive", ["slackAuth"])
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded", "application/json"] : [_mediaType])
    return _ctx
end

"""

Marked a user as active. Deprecated and non-functional.
Return: Dict{String, Any}
"""
function usersSetActive(_api::UsersApi; _mediaType=nothing)
    _ctx = _swaggerinternal_usersSetActive(_api; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function usersSetActive(_api::UsersApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _swaggerinternal_usersSetActive(_api; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_usersSetPhoto(_api::UsersApi; crop_w=nothing, crop_x=nothing, crop_y=nothing, image=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", Dict{String, Any}, "/users.setPhoto", ["slackAuth"])
    Swagger.set_param(_ctx.form, "crop_w", crop_w)  # type String
    Swagger.set_param(_ctx.form, "crop_x", crop_x)  # type String
    Swagger.set_param(_ctx.form, "crop_y", crop_y)  # type String
    Swagger.set_param(_ctx.form, "image", image)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded"] : [_mediaType])
    return _ctx
end

"""

Set the user profile photo
Param: crop_w::String
Param: crop_x::String
Param: crop_y::String
Param: image::String
Return: Dict{String, Any}
"""
function usersSetPhoto(_api::UsersApi; crop_w=nothing, crop_x=nothing, crop_y=nothing, image=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_usersSetPhoto(_api; crop_w=crop_w, crop_x=crop_x, crop_y=crop_y, image=image, _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function usersSetPhoto(_api::UsersApi, response_stream::Channel; crop_w=nothing, crop_x=nothing, crop_y=nothing, image=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_usersSetPhoto(_api; crop_w=crop_w, crop_x=crop_x, crop_y=crop_y, image=image, _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_usersSetPresence(_api::UsersApi, presence::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", Dict{String, Any}, "/users.setPresence", ["slackAuth"])
    Swagger.set_param(_ctx.form, "presence", presence)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded", "application/json"] : [_mediaType])
    return _ctx
end

"""

Manually sets user presence.
Param: presence::String (required)
Return: Dict{String, Any}
"""
function usersSetPresence(_api::UsersApi, presence::String; _mediaType=nothing)
    _ctx = _swaggerinternal_usersSetPresence(_api, presence; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function usersSetPresence(_api::UsersApi, response_stream::Channel, presence::String; _mediaType=nothing)
    _ctx = _swaggerinternal_usersSetPresence(_api, presence; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

export usersConversations, usersDeletePhoto, usersGetPresence, usersIdentity, usersInfo, usersList, usersLookupByEmail, usersProfileGet, usersProfileSet, usersSetActive, usersSetPhoto, usersSetPresence
