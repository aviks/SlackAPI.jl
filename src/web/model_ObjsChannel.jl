# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


@doc raw"""
    ObjsChannel(;
        accepted_user=nothing,
        created=nothing,
        creator=nothing,
        id=nothing,
        is_archived=nothing,
        is_channel=nothing,
        is_frozen=nothing,
        is_general=nothing,
        is_member=nothing,
        is_moved=nothing,
        is_mpim=nothing,
        is_non_threadable=nothing,
        is_org_shared=nothing,
        is_pending_ext_shared=nothing,
        is_private=nothing,
        is_read_only=nothing,
        is_shared=nothing,
        is_thread_only=nothing,
        last_read=nothing,
        latest=nothing,
        members=nothing,
        name=nothing,
        name_normalized=nothing,
        num_members=nothing,
        pending_shared=nothing,
        previous_names=nothing,
        priority=nothing,
        purpose=nothing,
        topic=nothing,
        unlinked=nothing,
        unread_count=nothing,
        unread_count_display=nothing,
    )

    - accepted_user::DefsUserId
    - created::Int32
    - creator::DefsUserId
    - id::DefsChannelId
    - is_archived::Bool
    - is_channel::Bool
    - is_frozen::Bool
    - is_general::Bool
    - is_member::Bool
    - is_moved::Int32
    - is_mpim::Bool
    - is_non_threadable::Bool
    - is_org_shared::Bool
    - is_pending_ext_shared::Bool
    - is_private::Bool
    - is_read_only::Bool
    - is_shared::Bool
    - is_thread_only::Bool
    - last_read::DefsTs
    - latest::Any
    - members::Vector{DefsUserId}
    - name::String
    - name_normalized::String
    - num_members::Int32
    - pending_shared::Vector{DefsTeam}
    - previous_names::Vector{DefsChannelName}
    - priority::Float32
    - purpose::ObjsChannelPurpose
    - topic::ObjsChannelPurpose
    - unlinked::Int32
    - unread_count::Int32
    - unread_count_display::Int32
"""
mutable struct ObjsChannel <: SwaggerModel
    accepted_user::Any # spec type: Union{ Nothing, DefsUserId } # spec name: accepted_user
    created::Any # spec type: Union{ Nothing, Int32 } # spec name: created
    creator::Any # spec type: Union{ Nothing, DefsUserId } # spec name: creator
    id::Any # spec type: Union{ Nothing, DefsChannelId } # spec name: id
    is_archived::Any # spec type: Union{ Nothing, Bool } # spec name: is_archived
    is_channel::Any # spec type: Union{ Nothing, Bool } # spec name: is_channel
    is_frozen::Any # spec type: Union{ Nothing, Bool } # spec name: is_frozen
    is_general::Any # spec type: Union{ Nothing, Bool } # spec name: is_general
    is_member::Any # spec type: Union{ Nothing, Bool } # spec name: is_member
    is_moved::Any # spec type: Union{ Nothing, Int32 } # spec name: is_moved
    is_mpim::Any # spec type: Union{ Nothing, Bool } # spec name: is_mpim
    is_non_threadable::Any # spec type: Union{ Nothing, Bool } # spec name: is_non_threadable
    is_org_shared::Any # spec type: Union{ Nothing, Bool } # spec name: is_org_shared
    is_pending_ext_shared::Any # spec type: Union{ Nothing, Bool } # spec name: is_pending_ext_shared
    is_private::Any # spec type: Union{ Nothing, Bool } # spec name: is_private
    is_read_only::Any # spec type: Union{ Nothing, Bool } # spec name: is_read_only
    is_shared::Any # spec type: Union{ Nothing, Bool } # spec name: is_shared
    is_thread_only::Any # spec type: Union{ Nothing, Bool } # spec name: is_thread_only
    last_read::Any # spec type: Union{ Nothing, DefsTs } # spec name: last_read
    latest::Any # spec type: Union{ Nothing, Any } # spec name: latest
    members::Any # spec type: Union{ Nothing, Vector{DefsUserId} } # spec name: members
    name::Any # spec type: Union{ Nothing, String } # spec name: name
    name_normalized::Any # spec type: Union{ Nothing, String } # spec name: name_normalized
    num_members::Any # spec type: Union{ Nothing, Int32 } # spec name: num_members
    pending_shared::Any # spec type: Union{ Nothing, Vector{DefsTeam} } # spec name: pending_shared
    previous_names::Any # spec type: Union{ Nothing, Vector{DefsChannelName} } # spec name: previous_names
    priority::Any # spec type: Union{ Nothing, Float32 } # spec name: priority
    purpose::Any # spec type: Union{ Nothing, ObjsChannelPurpose } # spec name: purpose
    topic::Any # spec type: Union{ Nothing, ObjsChannelPurpose } # spec name: topic
    unlinked::Any # spec type: Union{ Nothing, Int32 } # spec name: unlinked
    unread_count::Any # spec type: Union{ Nothing, Int32 } # spec name: unread_count
    unread_count_display::Any # spec type: Union{ Nothing, Int32 } # spec name: unread_count_display

    function ObjsChannel(;accepted_user=nothing, created=nothing, creator=nothing, id=nothing, is_archived=nothing, is_channel=nothing, is_frozen=nothing, is_general=nothing, is_member=nothing, is_moved=nothing, is_mpim=nothing, is_non_threadable=nothing, is_org_shared=nothing, is_pending_ext_shared=nothing, is_private=nothing, is_read_only=nothing, is_shared=nothing, is_thread_only=nothing, last_read=nothing, latest=nothing, members=nothing, name=nothing, name_normalized=nothing, num_members=nothing, pending_shared=nothing, previous_names=nothing, priority=nothing, purpose=nothing, topic=nothing, unlinked=nothing, unread_count=nothing, unread_count_display=nothing)
        o = new()
        validate_property(ObjsChannel, Symbol("accepted_user"), accepted_user)
        setfield!(o, Symbol("accepted_user"), accepted_user)
        validate_property(ObjsChannel, Symbol("created"), created)
        setfield!(o, Symbol("created"), created)
        validate_property(ObjsChannel, Symbol("creator"), creator)
        setfield!(o, Symbol("creator"), creator)
        validate_property(ObjsChannel, Symbol("id"), id)
        setfield!(o, Symbol("id"), id)
        validate_property(ObjsChannel, Symbol("is_archived"), is_archived)
        setfield!(o, Symbol("is_archived"), is_archived)
        validate_property(ObjsChannel, Symbol("is_channel"), is_channel)
        setfield!(o, Symbol("is_channel"), is_channel)
        validate_property(ObjsChannel, Symbol("is_frozen"), is_frozen)
        setfield!(o, Symbol("is_frozen"), is_frozen)
        validate_property(ObjsChannel, Symbol("is_general"), is_general)
        setfield!(o, Symbol("is_general"), is_general)
        validate_property(ObjsChannel, Symbol("is_member"), is_member)
        setfield!(o, Symbol("is_member"), is_member)
        validate_property(ObjsChannel, Symbol("is_moved"), is_moved)
        setfield!(o, Symbol("is_moved"), is_moved)
        validate_property(ObjsChannel, Symbol("is_mpim"), is_mpim)
        setfield!(o, Symbol("is_mpim"), is_mpim)
        validate_property(ObjsChannel, Symbol("is_non_threadable"), is_non_threadable)
        setfield!(o, Symbol("is_non_threadable"), is_non_threadable)
        validate_property(ObjsChannel, Symbol("is_org_shared"), is_org_shared)
        setfield!(o, Symbol("is_org_shared"), is_org_shared)
        validate_property(ObjsChannel, Symbol("is_pending_ext_shared"), is_pending_ext_shared)
        setfield!(o, Symbol("is_pending_ext_shared"), is_pending_ext_shared)
        validate_property(ObjsChannel, Symbol("is_private"), is_private)
        setfield!(o, Symbol("is_private"), is_private)
        validate_property(ObjsChannel, Symbol("is_read_only"), is_read_only)
        setfield!(o, Symbol("is_read_only"), is_read_only)
        validate_property(ObjsChannel, Symbol("is_shared"), is_shared)
        setfield!(o, Symbol("is_shared"), is_shared)
        validate_property(ObjsChannel, Symbol("is_thread_only"), is_thread_only)
        setfield!(o, Symbol("is_thread_only"), is_thread_only)
        validate_property(ObjsChannel, Symbol("last_read"), last_read)
        setfield!(o, Symbol("last_read"), last_read)
        validate_property(ObjsChannel, Symbol("latest"), latest)
        setfield!(o, Symbol("latest"), latest)
        validate_property(ObjsChannel, Symbol("members"), members)
        setfield!(o, Symbol("members"), members)
        validate_property(ObjsChannel, Symbol("name"), name)
        setfield!(o, Symbol("name"), name)
        validate_property(ObjsChannel, Symbol("name_normalized"), name_normalized)
        setfield!(o, Symbol("name_normalized"), name_normalized)
        validate_property(ObjsChannel, Symbol("num_members"), num_members)
        setfield!(o, Symbol("num_members"), num_members)
        validate_property(ObjsChannel, Symbol("pending_shared"), pending_shared)
        setfield!(o, Symbol("pending_shared"), pending_shared)
        validate_property(ObjsChannel, Symbol("previous_names"), previous_names)
        setfield!(o, Symbol("previous_names"), previous_names)
        validate_property(ObjsChannel, Symbol("priority"), priority)
        setfield!(o, Symbol("priority"), priority)
        validate_property(ObjsChannel, Symbol("purpose"), purpose)
        setfield!(o, Symbol("purpose"), purpose)
        validate_property(ObjsChannel, Symbol("topic"), topic)
        setfield!(o, Symbol("topic"), topic)
        validate_property(ObjsChannel, Symbol("unlinked"), unlinked)
        setfield!(o, Symbol("unlinked"), unlinked)
        validate_property(ObjsChannel, Symbol("unread_count"), unread_count)
        setfield!(o, Symbol("unread_count"), unread_count)
        validate_property(ObjsChannel, Symbol("unread_count_display"), unread_count_display)
        setfield!(o, Symbol("unread_count_display"), unread_count_display)
        o
    end
end # type ObjsChannel

const _property_map_ObjsChannel = Dict{Symbol,Symbol}(Symbol("accepted_user")=>Symbol("accepted_user"), Symbol("created")=>Symbol("created"), Symbol("creator")=>Symbol("creator"), Symbol("id")=>Symbol("id"), Symbol("is_archived")=>Symbol("is_archived"), Symbol("is_channel")=>Symbol("is_channel"), Symbol("is_frozen")=>Symbol("is_frozen"), Symbol("is_general")=>Symbol("is_general"), Symbol("is_member")=>Symbol("is_member"), Symbol("is_moved")=>Symbol("is_moved"), Symbol("is_mpim")=>Symbol("is_mpim"), Symbol("is_non_threadable")=>Symbol("is_non_threadable"), Symbol("is_org_shared")=>Symbol("is_org_shared"), Symbol("is_pending_ext_shared")=>Symbol("is_pending_ext_shared"), Symbol("is_private")=>Symbol("is_private"), Symbol("is_read_only")=>Symbol("is_read_only"), Symbol("is_shared")=>Symbol("is_shared"), Symbol("is_thread_only")=>Symbol("is_thread_only"), Symbol("last_read")=>Symbol("last_read"), Symbol("latest")=>Symbol("latest"), Symbol("members")=>Symbol("members"), Symbol("name")=>Symbol("name"), Symbol("name_normalized")=>Symbol("name_normalized"), Symbol("num_members")=>Symbol("num_members"), Symbol("pending_shared")=>Symbol("pending_shared"), Symbol("previous_names")=>Symbol("previous_names"), Symbol("priority")=>Symbol("priority"), Symbol("purpose")=>Symbol("purpose"), Symbol("topic")=>Symbol("topic"), Symbol("unlinked")=>Symbol("unlinked"), Symbol("unread_count")=>Symbol("unread_count"), Symbol("unread_count_display")=>Symbol("unread_count_display"))
const _property_types_ObjsChannel = Dict{Symbol,String}(Symbol("accepted_user")=>"DefsUserId", Symbol("created")=>"Int32", Symbol("creator")=>"DefsUserId", Symbol("id")=>"DefsChannelId", Symbol("is_archived")=>"Bool", Symbol("is_channel")=>"Bool", Symbol("is_frozen")=>"Bool", Symbol("is_general")=>"Bool", Symbol("is_member")=>"Bool", Symbol("is_moved")=>"Int32", Symbol("is_mpim")=>"Bool", Symbol("is_non_threadable")=>"Bool", Symbol("is_org_shared")=>"Bool", Symbol("is_pending_ext_shared")=>"Bool", Symbol("is_private")=>"Bool", Symbol("is_read_only")=>"Bool", Symbol("is_shared")=>"Bool", Symbol("is_thread_only")=>"Bool", Symbol("last_read")=>"DefsTs", Symbol("latest")=>"Any", Symbol("members")=>"Vector{DefsUserId}", Symbol("name")=>"String", Symbol("name_normalized")=>"String", Symbol("num_members")=>"Int32", Symbol("pending_shared")=>"Vector{DefsTeam}", Symbol("previous_names")=>"Vector{DefsChannelName}", Symbol("priority")=>"Float32", Symbol("purpose")=>"ObjsChannelPurpose", Symbol("topic")=>"ObjsChannelPurpose", Symbol("unlinked")=>"Int32", Symbol("unread_count")=>"Int32", Symbol("unread_count_display")=>"Int32")
Base.propertynames(::Type{ ObjsChannel }) = collect(keys(_property_map_ObjsChannel))
Swagger.property_type(::Type{ ObjsChannel }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ObjsChannel[name]))}
Swagger.field_name(::Type{ ObjsChannel }, property_name::Symbol) =  _property_map_ObjsChannel[property_name]

function check_required(o::ObjsChannel)
    (getproperty(o, Symbol("created")) === nothing) && (return false)
    (getproperty(o, Symbol("creator")) === nothing) && (return false)
    (getproperty(o, Symbol("id")) === nothing) && (return false)
    (getproperty(o, Symbol("is_channel")) === nothing) && (return false)
    (getproperty(o, Symbol("is_mpim")) === nothing) && (return false)
    (getproperty(o, Symbol("is_org_shared")) === nothing) && (return false)
    (getproperty(o, Symbol("is_private")) === nothing) && (return false)
    (getproperty(o, Symbol("is_shared")) === nothing) && (return false)
    (getproperty(o, Symbol("members")) === nothing) && (return false)
    (getproperty(o, Symbol("name")) === nothing) && (return false)
    (getproperty(o, Symbol("name_normalized")) === nothing) && (return false)
    (getproperty(o, Symbol("purpose")) === nothing) && (return false)
    (getproperty(o, Symbol("topic")) === nothing) && (return false)
    true
end

function validate_property(::Type{ ObjsChannel }, name::Symbol, val)
end
