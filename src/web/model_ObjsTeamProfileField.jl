# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


@doc raw"""
    ObjsTeamProfileField(;
        hint=nothing,
        id=nothing,
        is_hidden=nothing,
        label=nothing,
        options=nothing,
        ordering=nothing,
        type=nothing,
    )

    - hint::String
    - id::String
    - is_hidden::Bool
    - label::String
    - options::Any
    - ordering::Float32
    - type::String
"""
mutable struct ObjsTeamProfileField <: SwaggerModel
    hint::Any # spec type: Union{ Nothing, String } # spec name: hint
    id::Any # spec type: Union{ Nothing, String } # spec name: id
    is_hidden::Any # spec type: Union{ Nothing, Bool } # spec name: is_hidden
    label::Any # spec type: Union{ Nothing, String } # spec name: label
    options::Any # spec type: Union{ Nothing, Any } # spec name: options
    ordering::Any # spec type: Union{ Nothing, Float32 } # spec name: ordering
    type::Any # spec type: Union{ Nothing, String } # spec name: type

    function ObjsTeamProfileField(;hint=nothing, id=nothing, is_hidden=nothing, label=nothing, options=nothing, ordering=nothing, type=nothing)
        o = new()
        validate_property(ObjsTeamProfileField, Symbol("hint"), hint)
        setfield!(o, Symbol("hint"), hint)
        validate_property(ObjsTeamProfileField, Symbol("id"), id)
        setfield!(o, Symbol("id"), id)
        validate_property(ObjsTeamProfileField, Symbol("is_hidden"), is_hidden)
        setfield!(o, Symbol("is_hidden"), is_hidden)
        validate_property(ObjsTeamProfileField, Symbol("label"), label)
        setfield!(o, Symbol("label"), label)
        validate_property(ObjsTeamProfileField, Symbol("options"), options)
        setfield!(o, Symbol("options"), options)
        validate_property(ObjsTeamProfileField, Symbol("ordering"), ordering)
        setfield!(o, Symbol("ordering"), ordering)
        validate_property(ObjsTeamProfileField, Symbol("type"), type)
        setfield!(o, Symbol("type"), type)
        o
    end
end # type ObjsTeamProfileField

const _property_map_ObjsTeamProfileField = Dict{Symbol,Symbol}(Symbol("hint")=>Symbol("hint"), Symbol("id")=>Symbol("id"), Symbol("is_hidden")=>Symbol("is_hidden"), Symbol("label")=>Symbol("label"), Symbol("options")=>Symbol("options"), Symbol("ordering")=>Symbol("ordering"), Symbol("type")=>Symbol("type"))
const _property_types_ObjsTeamProfileField = Dict{Symbol,String}(Symbol("hint")=>"String", Symbol("id")=>"String", Symbol("is_hidden")=>"Bool", Symbol("label")=>"String", Symbol("options")=>"Any", Symbol("ordering")=>"Float32", Symbol("type")=>"String")
Base.propertynames(::Type{ ObjsTeamProfileField }) = collect(keys(_property_map_ObjsTeamProfileField))
Swagger.property_type(::Type{ ObjsTeamProfileField }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ObjsTeamProfileField[name]))}
Swagger.field_name(::Type{ ObjsTeamProfileField }, property_name::Symbol) =  _property_map_ObjsTeamProfileField[property_name]

const _allowed_ObjsTeamProfileField_type = ["text", "date", "link", "mailto", "options_list", "user"]

function check_required(o::ObjsTeamProfileField)
    (getproperty(o, Symbol("hint")) === nothing) && (return false)
    (getproperty(o, Symbol("id")) === nothing) && (return false)
    (getproperty(o, Symbol("label")) === nothing) && (return false)
    (getproperty(o, Symbol("ordering")) === nothing) && (return false)
    true
end

function validate_property(::Type{ ObjsTeamProfileField }, name::Symbol, val)
    if name === Symbol("id")
    end
    if name === Symbol("type")
        Swagger.validate_param(name, "ObjsTeamProfileField", :enum, val, _allowed_ObjsTeamProfileField_type)
    end
end
