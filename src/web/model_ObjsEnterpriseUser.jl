# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


@doc raw"""
    ObjsEnterpriseUser(;
        enterprise_id=nothing,
        enterprise_name=nothing,
        id=nothing,
        is_admin=nothing,
        is_owner=nothing,
        teams=nothing,
    )

    - enterprise_id::DefsEnterpriseId
    - enterprise_name::DefsEnterpriseName
    - id::DefsEnterpriseUserId
    - is_admin::Bool
    - is_owner::Bool
    - teams::Vector{DefsTeam}
"""
mutable struct ObjsEnterpriseUser <: SwaggerModel
    enterprise_id::Any # spec type: Union{ Nothing, DefsEnterpriseId } # spec name: enterprise_id
    enterprise_name::Any # spec type: Union{ Nothing, DefsEnterpriseName } # spec name: enterprise_name
    id::Any # spec type: Union{ Nothing, DefsEnterpriseUserId } # spec name: id
    is_admin::Any # spec type: Union{ Nothing, Bool } # spec name: is_admin
    is_owner::Any # spec type: Union{ Nothing, Bool } # spec name: is_owner
    teams::Any # spec type: Union{ Nothing, Vector{DefsTeam} } # spec name: teams

    function ObjsEnterpriseUser(;enterprise_id=nothing, enterprise_name=nothing, id=nothing, is_admin=nothing, is_owner=nothing, teams=nothing)
        o = new()
        validate_property(ObjsEnterpriseUser, Symbol("enterprise_id"), enterprise_id)
        setfield!(o, Symbol("enterprise_id"), enterprise_id)
        validate_property(ObjsEnterpriseUser, Symbol("enterprise_name"), enterprise_name)
        setfield!(o, Symbol("enterprise_name"), enterprise_name)
        validate_property(ObjsEnterpriseUser, Symbol("id"), id)
        setfield!(o, Symbol("id"), id)
        validate_property(ObjsEnterpriseUser, Symbol("is_admin"), is_admin)
        setfield!(o, Symbol("is_admin"), is_admin)
        validate_property(ObjsEnterpriseUser, Symbol("is_owner"), is_owner)
        setfield!(o, Symbol("is_owner"), is_owner)
        validate_property(ObjsEnterpriseUser, Symbol("teams"), teams)
        setfield!(o, Symbol("teams"), teams)
        o
    end
end # type ObjsEnterpriseUser

const _property_map_ObjsEnterpriseUser = Dict{Symbol,Symbol}(Symbol("enterprise_id")=>Symbol("enterprise_id"), Symbol("enterprise_name")=>Symbol("enterprise_name"), Symbol("id")=>Symbol("id"), Symbol("is_admin")=>Symbol("is_admin"), Symbol("is_owner")=>Symbol("is_owner"), Symbol("teams")=>Symbol("teams"))
const _property_types_ObjsEnterpriseUser = Dict{Symbol,String}(Symbol("enterprise_id")=>"DefsEnterpriseId", Symbol("enterprise_name")=>"DefsEnterpriseName", Symbol("id")=>"DefsEnterpriseUserId", Symbol("is_admin")=>"Bool", Symbol("is_owner")=>"Bool", Symbol("teams")=>"Vector{DefsTeam}")
Base.propertynames(::Type{ ObjsEnterpriseUser }) = collect(keys(_property_map_ObjsEnterpriseUser))
Swagger.property_type(::Type{ ObjsEnterpriseUser }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ObjsEnterpriseUser[name]))}
Swagger.field_name(::Type{ ObjsEnterpriseUser }, property_name::Symbol) =  _property_map_ObjsEnterpriseUser[property_name]

function check_required(o::ObjsEnterpriseUser)
    (getproperty(o, Symbol("enterprise_id")) === nothing) && (return false)
    (getproperty(o, Symbol("enterprise_name")) === nothing) && (return false)
    (getproperty(o, Symbol("id")) === nothing) && (return false)
    (getproperty(o, Symbol("is_admin")) === nothing) && (return false)
    (getproperty(o, Symbol("is_owner")) === nothing) && (return false)
    (getproperty(o, Symbol("teams")) === nothing) && (return false)
    true
end

function validate_property(::Type{ ObjsEnterpriseUser }, name::Symbol, val)
end
