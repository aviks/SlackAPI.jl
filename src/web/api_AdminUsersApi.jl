# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

struct AdminUsersApi <: SwaggerApi
    client::Swagger.Client
end

function _swaggerinternal_adminUsersAssign(_api::AdminUsersApi, team_id::String, user_id::String; is_restricted=nothing, is_ultra_restricted=nothing, channel_ids=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", Dict{String, Any}, "/admin.users.assign", ["slackAuth"])
    Swagger.set_param(_ctx.form, "team_id", team_id)  # type String
    Swagger.set_param(_ctx.form, "user_id", user_id)  # type String
    Swagger.set_param(_ctx.form, "is_restricted", is_restricted)  # type Bool
    Swagger.set_param(_ctx.form, "is_ultra_restricted", is_ultra_restricted)  # type Bool
    Swagger.set_param(_ctx.form, "channel_ids", channel_ids)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded", "application/json"] : [_mediaType])
    return _ctx
end

"""

Add an Enterprise user to a workspace.
Param: team_id::String (required)
Param: user_id::String (required)
Param: is_restricted::Bool
Param: is_ultra_restricted::Bool
Param: channel_ids::String
Return: Dict{String, Any}
"""
function adminUsersAssign(_api::AdminUsersApi, team_id::String, user_id::String; is_restricted=nothing, is_ultra_restricted=nothing, channel_ids=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_adminUsersAssign(_api, team_id, user_id; is_restricted=is_restricted, is_ultra_restricted=is_ultra_restricted, channel_ids=channel_ids, _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function adminUsersAssign(_api::AdminUsersApi, response_stream::Channel, team_id::String, user_id::String; is_restricted=nothing, is_ultra_restricted=nothing, channel_ids=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_adminUsersAssign(_api, team_id, user_id; is_restricted=is_restricted, is_ultra_restricted=is_ultra_restricted, channel_ids=channel_ids, _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_adminUsersInvite(_api::AdminUsersApi, team_id::String, email::String, channel_ids::String; custom_message=nothing, real_name=nothing, resend=nothing, is_restricted=nothing, is_ultra_restricted=nothing, guest_expiration_ts=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", Dict{String, Any}, "/admin.users.invite", ["slackAuth"])
    Swagger.set_param(_ctx.form, "team_id", team_id)  # type String
    Swagger.set_param(_ctx.form, "email", email)  # type String
    Swagger.set_param(_ctx.form, "channel_ids", channel_ids)  # type String
    Swagger.set_param(_ctx.form, "custom_message", custom_message)  # type String
    Swagger.set_param(_ctx.form, "real_name", real_name)  # type String
    Swagger.set_param(_ctx.form, "resend", resend)  # type Bool
    Swagger.set_param(_ctx.form, "is_restricted", is_restricted)  # type Bool
    Swagger.set_param(_ctx.form, "is_ultra_restricted", is_ultra_restricted)  # type Bool
    Swagger.set_param(_ctx.form, "guest_expiration_ts", guest_expiration_ts)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded", "application/json"] : [_mediaType])
    return _ctx
end

"""

Invite a user to a workspace.
Param: team_id::String (required)
Param: email::String (required)
Param: channel_ids::String (required)
Param: custom_message::String
Param: real_name::String
Param: resend::Bool
Param: is_restricted::Bool
Param: is_ultra_restricted::Bool
Param: guest_expiration_ts::String
Return: Dict{String, Any}
"""
function adminUsersInvite(_api::AdminUsersApi, team_id::String, email::String, channel_ids::String; custom_message=nothing, real_name=nothing, resend=nothing, is_restricted=nothing, is_ultra_restricted=nothing, guest_expiration_ts=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_adminUsersInvite(_api, team_id, email, channel_ids; custom_message=custom_message, real_name=real_name, resend=resend, is_restricted=is_restricted, is_ultra_restricted=is_ultra_restricted, guest_expiration_ts=guest_expiration_ts, _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function adminUsersInvite(_api::AdminUsersApi, response_stream::Channel, team_id::String, email::String, channel_ids::String; custom_message=nothing, real_name=nothing, resend=nothing, is_restricted=nothing, is_ultra_restricted=nothing, guest_expiration_ts=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_adminUsersInvite(_api, team_id, email, channel_ids; custom_message=custom_message, real_name=real_name, resend=resend, is_restricted=is_restricted, is_ultra_restricted=is_ultra_restricted, guest_expiration_ts=guest_expiration_ts, _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_adminUsersList(_api::AdminUsersApi, team_id::String; cursor=nothing, limit=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", Dict{String, Any}, "/admin.users.list", ["slackAuth"])
    Swagger.set_param(_ctx.query, "team_id", team_id)  # type String
    Swagger.set_param(_ctx.query, "cursor", cursor)  # type String
    Swagger.set_param(_ctx.query, "limit", limit)  # type Int32
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded", "application/json"] : [_mediaType])
    return _ctx
end

"""

List users on a workspace
Param: team_id::String (required)
Param: cursor::String
Param: limit::Int32
Return: Dict{String, Any}
"""
function adminUsersList(_api::AdminUsersApi, team_id::String; cursor=nothing, limit=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_adminUsersList(_api, team_id; cursor=cursor, limit=limit, _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function adminUsersList(_api::AdminUsersApi, response_stream::Channel, team_id::String; cursor=nothing, limit=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_adminUsersList(_api, team_id; cursor=cursor, limit=limit, _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_adminUsersRemove(_api::AdminUsersApi, team_id::String, user_id::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", Dict{String, Any}, "/admin.users.remove", ["slackAuth"])
    Swagger.set_param(_ctx.form, "team_id", team_id)  # type String
    Swagger.set_param(_ctx.form, "user_id", user_id)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded", "application/json"] : [_mediaType])
    return _ctx
end

"""

Remove a user from a workspace.
Param: team_id::String (required)
Param: user_id::String (required)
Return: Dict{String, Any}
"""
function adminUsersRemove(_api::AdminUsersApi, team_id::String, user_id::String; _mediaType=nothing)
    _ctx = _swaggerinternal_adminUsersRemove(_api, team_id, user_id; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function adminUsersRemove(_api::AdminUsersApi, response_stream::Channel, team_id::String, user_id::String; _mediaType=nothing)
    _ctx = _swaggerinternal_adminUsersRemove(_api, team_id, user_id; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_adminUsersSetAdmin(_api::AdminUsersApi, team_id::String, user_id::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", Dict{String, Any}, "/admin.users.setAdmin", ["slackAuth"])
    Swagger.set_param(_ctx.form, "team_id", team_id)  # type String
    Swagger.set_param(_ctx.form, "user_id", user_id)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded", "application/json"] : [_mediaType])
    return _ctx
end

"""

Set an existing guest, regular user, or owner to be an admin user.
Param: team_id::String (required)
Param: user_id::String (required)
Return: Dict{String, Any}
"""
function adminUsersSetAdmin(_api::AdminUsersApi, team_id::String, user_id::String; _mediaType=nothing)
    _ctx = _swaggerinternal_adminUsersSetAdmin(_api, team_id, user_id; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function adminUsersSetAdmin(_api::AdminUsersApi, response_stream::Channel, team_id::String, user_id::String; _mediaType=nothing)
    _ctx = _swaggerinternal_adminUsersSetAdmin(_api, team_id, user_id; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_adminUsersSetExpiration(_api::AdminUsersApi, team_id::String, user_id::String, expiration_ts::Int32; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", Dict{String, Any}, "/admin.users.setExpiration", ["slackAuth"])
    Swagger.set_param(_ctx.form, "team_id", team_id)  # type String
    Swagger.set_param(_ctx.form, "user_id", user_id)  # type String
    Swagger.set_param(_ctx.form, "expiration_ts", expiration_ts)  # type Int32
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded", "application/json"] : [_mediaType])
    return _ctx
end

"""

Set an expiration for a guest user
Param: team_id::String (required)
Param: user_id::String (required)
Param: expiration_ts::Int32 (required)
Return: Dict{String, Any}
"""
function adminUsersSetExpiration(_api::AdminUsersApi, team_id::String, user_id::String, expiration_ts::Int32; _mediaType=nothing)
    _ctx = _swaggerinternal_adminUsersSetExpiration(_api, team_id, user_id, expiration_ts; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function adminUsersSetExpiration(_api::AdminUsersApi, response_stream::Channel, team_id::String, user_id::String, expiration_ts::Int32; _mediaType=nothing)
    _ctx = _swaggerinternal_adminUsersSetExpiration(_api, team_id, user_id, expiration_ts; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_adminUsersSetOwner(_api::AdminUsersApi, team_id::String, user_id::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", Dict{String, Any}, "/admin.users.setOwner", ["slackAuth"])
    Swagger.set_param(_ctx.form, "team_id", team_id)  # type String
    Swagger.set_param(_ctx.form, "user_id", user_id)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded", "application/json"] : [_mediaType])
    return _ctx
end

"""

Set an existing guest, regular user, or admin user to be a workspace owner.
Param: team_id::String (required)
Param: user_id::String (required)
Return: Dict{String, Any}
"""
function adminUsersSetOwner(_api::AdminUsersApi, team_id::String, user_id::String; _mediaType=nothing)
    _ctx = _swaggerinternal_adminUsersSetOwner(_api, team_id, user_id; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function adminUsersSetOwner(_api::AdminUsersApi, response_stream::Channel, team_id::String, user_id::String; _mediaType=nothing)
    _ctx = _swaggerinternal_adminUsersSetOwner(_api, team_id, user_id; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_adminUsersSetRegular(_api::AdminUsersApi, team_id::String, user_id::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", Dict{String, Any}, "/admin.users.setRegular", ["slackAuth"])
    Swagger.set_param(_ctx.form, "team_id", team_id)  # type String
    Swagger.set_param(_ctx.form, "user_id", user_id)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded", "application/json"] : [_mediaType])
    return _ctx
end

"""

Set an existing guest user, admin user, or owner to be a regular user.
Param: team_id::String (required)
Param: user_id::String (required)
Return: Dict{String, Any}
"""
function adminUsersSetRegular(_api::AdminUsersApi, team_id::String, user_id::String; _mediaType=nothing)
    _ctx = _swaggerinternal_adminUsersSetRegular(_api, team_id, user_id; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function adminUsersSetRegular(_api::AdminUsersApi, response_stream::Channel, team_id::String, user_id::String; _mediaType=nothing)
    _ctx = _swaggerinternal_adminUsersSetRegular(_api, team_id, user_id; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

export adminUsersAssign, adminUsersInvite, adminUsersList, adminUsersRemove, adminUsersSetAdmin, adminUsersSetExpiration, adminUsersSetOwner, adminUsersSetRegular
