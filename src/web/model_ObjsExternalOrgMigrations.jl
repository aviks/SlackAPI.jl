# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


@doc raw"""
    ObjsExternalOrgMigrations(;
        current=nothing,
        date_updated=nothing,
    )

    - current::Vector{ObjsExternalOrgMigrationsCurrent}
    - date_updated::Int32
"""
mutable struct ObjsExternalOrgMigrations <: SwaggerModel
    current::Any # spec type: Union{ Nothing, Vector{ObjsExternalOrgMigrationsCurrent} } # spec name: current
    date_updated::Any # spec type: Union{ Nothing, Int32 } # spec name: date_updated

    function ObjsExternalOrgMigrations(;current=nothing, date_updated=nothing)
        o = new()
        validate_property(ObjsExternalOrgMigrations, Symbol("current"), current)
        setfield!(o, Symbol("current"), current)
        validate_property(ObjsExternalOrgMigrations, Symbol("date_updated"), date_updated)
        setfield!(o, Symbol("date_updated"), date_updated)
        o
    end
end # type ObjsExternalOrgMigrations

const _property_map_ObjsExternalOrgMigrations = Dict{Symbol,Symbol}(Symbol("current")=>Symbol("current"), Symbol("date_updated")=>Symbol("date_updated"))
const _property_types_ObjsExternalOrgMigrations = Dict{Symbol,String}(Symbol("current")=>"Vector{ObjsExternalOrgMigrationsCurrent}", Symbol("date_updated")=>"Int32")
Base.propertynames(::Type{ ObjsExternalOrgMigrations }) = collect(keys(_property_map_ObjsExternalOrgMigrations))
Swagger.property_type(::Type{ ObjsExternalOrgMigrations }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ObjsExternalOrgMigrations[name]))}
Swagger.field_name(::Type{ ObjsExternalOrgMigrations }, property_name::Symbol) =  _property_map_ObjsExternalOrgMigrations[property_name]

function check_required(o::ObjsExternalOrgMigrations)
    (getproperty(o, Symbol("current")) === nothing) && (return false)
    (getproperty(o, Symbol("date_updated")) === nothing) && (return false)
    true
end

function validate_property(::Type{ ObjsExternalOrgMigrations }, name::Symbol, val)
end
