# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

struct AppsApi <: SwaggerApi
    client::Swagger.Client
end

function _swaggerinternal_appsEventAuthorizationsList(_api::AppsApi, event_context::String; cursor=nothing, limit=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", Dict{String, Any}, "/apps.event.authorizations.list", ["slackAuth"])
    Swagger.set_param(_ctx.query, "event_context", event_context)  # type String
    Swagger.set_param(_ctx.query, "cursor", cursor)  # type String
    Swagger.set_param(_ctx.query, "limit", limit)  # type Int32
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded", "application/json"] : [_mediaType])
    return _ctx
end

"""

Get a list of authorizations for the given event context. Each authorization represents an app installation that the event is visible to.
Param: event_context::String (required)
Param: cursor::String
Param: limit::Int32
Return: Dict{String, Any}
"""
function appsEventAuthorizationsList(_api::AppsApi, event_context::String; cursor=nothing, limit=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_appsEventAuthorizationsList(_api, event_context; cursor=cursor, limit=limit, _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function appsEventAuthorizationsList(_api::AppsApi, response_stream::Channel, event_context::String; cursor=nothing, limit=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_appsEventAuthorizationsList(_api, event_context; cursor=cursor, limit=limit, _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_appsPermissionsInfo(_api::AppsApi; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", Dict{String, Any}, "/apps.permissions.info", ["slackAuth"])
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded"] : [_mediaType])
    return _ctx
end

"""

Returns list of permissions this app has on a team.
Return: Dict{String, Any}
"""
function appsPermissionsInfo(_api::AppsApi; _mediaType=nothing)
    _ctx = _swaggerinternal_appsPermissionsInfo(_api; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function appsPermissionsInfo(_api::AppsApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _swaggerinternal_appsPermissionsInfo(_api; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_appsPermissionsRequest(_api::AppsApi, scopes::String, trigger_id::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", Dict{String, Any}, "/apps.permissions.request", ["slackAuth"])
    Swagger.set_param(_ctx.query, "scopes", scopes)  # type String
    Swagger.set_param(_ctx.query, "trigger_id", trigger_id)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded"] : [_mediaType])
    return _ctx
end

"""

Allows an app to request additional scopes
Param: scopes::String (required)
Param: trigger_id::String (required)
Return: Dict{String, Any}
"""
function appsPermissionsRequest(_api::AppsApi, scopes::String, trigger_id::String; _mediaType=nothing)
    _ctx = _swaggerinternal_appsPermissionsRequest(_api, scopes, trigger_id; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function appsPermissionsRequest(_api::AppsApi, response_stream::Channel, scopes::String, trigger_id::String; _mediaType=nothing)
    _ctx = _swaggerinternal_appsPermissionsRequest(_api, scopes, trigger_id; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_appsPermissionsResourcesList(_api::AppsApi; cursor=nothing, limit=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", Dict{String, Any}, "/apps.permissions.resources.list", ["slackAuth"])
    Swagger.set_param(_ctx.query, "cursor", cursor)  # type String
    Swagger.set_param(_ctx.query, "limit", limit)  # type Int32
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded"] : [_mediaType])
    return _ctx
end

"""

Returns list of resource grants this app has on a team.
Param: cursor::String
Param: limit::Int32
Return: Dict{String, Any}
"""
function appsPermissionsResourcesList(_api::AppsApi; cursor=nothing, limit=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_appsPermissionsResourcesList(_api; cursor=cursor, limit=limit, _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function appsPermissionsResourcesList(_api::AppsApi, response_stream::Channel; cursor=nothing, limit=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_appsPermissionsResourcesList(_api; cursor=cursor, limit=limit, _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_appsPermissionsScopesList(_api::AppsApi; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", Dict{String, Any}, "/apps.permissions.scopes.list", ["slackAuth"])
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded"] : [_mediaType])
    return _ctx
end

"""

Returns list of scopes this app has on a team.
Return: Dict{String, Any}
"""
function appsPermissionsScopesList(_api::AppsApi; _mediaType=nothing)
    _ctx = _swaggerinternal_appsPermissionsScopesList(_api; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function appsPermissionsScopesList(_api::AppsApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _swaggerinternal_appsPermissionsScopesList(_api; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_appsPermissionsUsersList(_api::AppsApi; cursor=nothing, limit=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", Dict{String, Any}, "/apps.permissions.users.list", ["slackAuth"])
    Swagger.set_param(_ctx.query, "cursor", cursor)  # type String
    Swagger.set_param(_ctx.query, "limit", limit)  # type Int32
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded"] : [_mediaType])
    return _ctx
end

"""

Returns list of user grants and corresponding scopes this app has on a team.
Param: cursor::String
Param: limit::Int32
Return: Dict{String, Any}
"""
function appsPermissionsUsersList(_api::AppsApi; cursor=nothing, limit=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_appsPermissionsUsersList(_api; cursor=cursor, limit=limit, _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function appsPermissionsUsersList(_api::AppsApi, response_stream::Channel; cursor=nothing, limit=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_appsPermissionsUsersList(_api; cursor=cursor, limit=limit, _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_appsPermissionsUsersRequest(_api::AppsApi, scopes::String, trigger_id::String, user::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", Dict{String, Any}, "/apps.permissions.users.request", ["slackAuth"])
    Swagger.set_param(_ctx.query, "scopes", scopes)  # type String
    Swagger.set_param(_ctx.query, "trigger_id", trigger_id)  # type String
    Swagger.set_param(_ctx.query, "user", user)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded"] : [_mediaType])
    return _ctx
end

"""

Enables an app to trigger a permissions modal to grant an app access to a user access scope.
Param: scopes::String (required)
Param: trigger_id::String (required)
Param: user::String (required)
Return: Dict{String, Any}
"""
function appsPermissionsUsersRequest(_api::AppsApi, scopes::String, trigger_id::String, user::String; _mediaType=nothing)
    _ctx = _swaggerinternal_appsPermissionsUsersRequest(_api, scopes, trigger_id, user; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function appsPermissionsUsersRequest(_api::AppsApi, response_stream::Channel, scopes::String, trigger_id::String, user::String; _mediaType=nothing)
    _ctx = _swaggerinternal_appsPermissionsUsersRequest(_api, scopes, trigger_id, user; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_appsUninstall(_api::AppsApi; client_id=nothing, client_secret=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", Dict{String, Any}, "/apps.uninstall", ["slackAuth"])
    Swagger.set_param(_ctx.query, "client_id", client_id)  # type String
    Swagger.set_param(_ctx.query, "client_secret", client_secret)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded"] : [_mediaType])
    return _ctx
end

"""

Uninstalls your app from a workspace.
Param: client_id::String
Param: client_secret::String
Return: Dict{String, Any}
"""
function appsUninstall(_api::AppsApi; client_id=nothing, client_secret=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_appsUninstall(_api; client_id=client_id, client_secret=client_secret, _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function appsUninstall(_api::AppsApi, response_stream::Channel; client_id=nothing, client_secret=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_appsUninstall(_api; client_id=client_id, client_secret=client_secret, _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

export appsEventAuthorizationsList, appsPermissionsInfo, appsPermissionsRequest, appsPermissionsResourcesList, appsPermissionsScopesList, appsPermissionsUsersList, appsPermissionsUsersRequest, appsUninstall
