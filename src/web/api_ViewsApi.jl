# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

struct ViewsApi <: SwaggerApi
    client::Swagger.Client
end

function _swaggerinternal_viewsOpen(_api::ViewsApi, trigger_id::String, view::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", Dict{String, Any}, "/views.open", ["slackAuth"])
    Swagger.set_param(_ctx.query, "trigger_id", trigger_id)  # type String
    Swagger.set_param(_ctx.query, "view", view)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded", "application/json"] : [_mediaType])
    return _ctx
end

"""

Open a view for a user.
Param: trigger_id::String (required)
Param: view::String (required)
Return: Dict{String, Any}
"""
function viewsOpen(_api::ViewsApi, trigger_id::String, view::String; _mediaType=nothing)
    _ctx = _swaggerinternal_viewsOpen(_api, trigger_id, view; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function viewsOpen(_api::ViewsApi, response_stream::Channel, trigger_id::String, view::String; _mediaType=nothing)
    _ctx = _swaggerinternal_viewsOpen(_api, trigger_id, view; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_viewsPublish(_api::ViewsApi, user_id::String, view::String; hash=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", Dict{String, Any}, "/views.publish", ["slackAuth"])
    Swagger.set_param(_ctx.query, "user_id", user_id)  # type String
    Swagger.set_param(_ctx.query, "view", view)  # type String
    Swagger.set_param(_ctx.query, "hash", hash)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded", "application/json"] : [_mediaType])
    return _ctx
end

"""

Publish a static view for a User.
Param: user_id::String (required)
Param: view::String (required)
Param: hash::String
Return: Dict{String, Any}
"""
function viewsPublish(_api::ViewsApi, user_id::String, view::String; hash=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_viewsPublish(_api, user_id, view; hash=hash, _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function viewsPublish(_api::ViewsApi, response_stream::Channel, user_id::String, view::String; hash=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_viewsPublish(_api, user_id, view; hash=hash, _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_viewsPush(_api::ViewsApi, trigger_id::String, view::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", Dict{String, Any}, "/views.push", ["slackAuth"])
    Swagger.set_param(_ctx.query, "trigger_id", trigger_id)  # type String
    Swagger.set_param(_ctx.query, "view", view)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded", "application/json"] : [_mediaType])
    return _ctx
end

"""

Push a view onto the stack of a root view.
Param: trigger_id::String (required)
Param: view::String (required)
Return: Dict{String, Any}
"""
function viewsPush(_api::ViewsApi, trigger_id::String, view::String; _mediaType=nothing)
    _ctx = _swaggerinternal_viewsPush(_api, trigger_id, view; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function viewsPush(_api::ViewsApi, response_stream::Channel, trigger_id::String, view::String; _mediaType=nothing)
    _ctx = _swaggerinternal_viewsPush(_api, trigger_id, view; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

function _swaggerinternal_viewsUpdate(_api::ViewsApi; view_id=nothing, external_id=nothing, view=nothing, hash=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", Dict{String, Any}, "/views.update", ["slackAuth"])
    Swagger.set_param(_ctx.query, "view_id", view_id)  # type String
    Swagger.set_param(_ctx.query, "external_id", external_id)  # type String
    Swagger.set_param(_ctx.query, "view", view)  # type String
    Swagger.set_param(_ctx.query, "hash", hash)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded", "application/json"] : [_mediaType])
    return _ctx
end

"""

Update an existing view.
Param: view_id::String
Param: external_id::String
Param: view::String
Param: hash::String
Return: Dict{String, Any}
"""
function viewsUpdate(_api::ViewsApi; view_id=nothing, external_id=nothing, view=nothing, hash=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_viewsUpdate(_api; view_id=view_id, external_id=external_id, view=view, hash=hash, _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function viewsUpdate(_api::ViewsApi, response_stream::Channel; view_id=nothing, external_id=nothing, view=nothing, hash=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_viewsUpdate(_api; view_id=view_id, external_id=external_id, view=view, hash=hash, _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

export viewsOpen, viewsPublish, viewsPush, viewsUpdate
